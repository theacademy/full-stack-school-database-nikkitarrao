package mthree.com.fullstackschool.dao;

import mthree.com.fullstackschool.dao.mappers.TeacherMapper;
import mthree.com.fullstackschool.model.Teacher;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.List;

@Repository
public class TeacherDaoImpl implements TeacherDao {

    private final JdbcTemplate jdbcTemplate;

    public TeacherDaoImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Teacher createNewTeacher(Teacher teacher) {
        //YOUR CODE STARTS HERE
        final String ADD_TEACHER = "INSERT INTO Teacher(tFName, tLName, dept) VALUES (?,?,?)";

        GeneratedKeyHolder keyholder = new GeneratedKeyHolder();
        jdbcTemplate.update(connection -> {
            PreparedStatement ps = connection.prepareStatement(ADD_TEACHER, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, teacher.getTeacherFName());
            ps.setString(2, teacher.getTeacherLName());
            ps.setString(3, teacher.getDept());
            return ps;
        }, keyholder); //must do this inorder to get the autogenerated key value

        teacher.setTeacherId(keyholder.getKey().intValue());

        return teacher;
        //YOUR CODE ENDS HERE
    }

    @Override
    public List<Teacher> getAllTeachers() {
        //YOUR CODE STARTS HERE
        final String GET_ALL_TEACHERS = "SELECT * FROM teacher";
        return jdbcTemplate.query(GET_ALL_TEACHERS, new TeacherMapper());
        //YOUR CODE ENDS HERE
    }

    @Override
    public Teacher findTeacherById(int id) {
        //YOUR CODE STARTS HERE
        try{
            final String GET_TEACHER_BY_ID = "SELECT * FROM teacher WHERE tid = ?";
            return jdbcTemplate.queryForObject(GET_TEACHER_BY_ID, new TeacherMapper(), id);
        } catch (DataAccessException ex){
            return null; //if no teacher for that id exists
        }
        //YOUR CODE ENDS HERE
    }

    @Override
    public void updateTeacher(Teacher t) {
        //YOUR CODE STARTS HERE
        final String UPDATE_teacher = "UPDATE teacher SET tFName = ?, tLName = ?, dept = ? WHERE tid = ?";
        jdbcTemplate.update(UPDATE_teacher, t.getTeacherFName(), t.getTeacherLName(), t.getDept(), t.getTeacherId());
        //YOUR CODE ENDS HERE
    }

    @Override
    public void deleteTeacher(int id) {
        //YOUR CODE STARTS HERE
        final String DELETE_COURSE_STUDENT_BY_TEACHER = "DELETE FROM course_student WHERE course_id IN (SELECT cid FROM course WHERE teacherId = ?)";
        jdbcTemplate.update(DELETE_COURSE_STUDENT_BY_TEACHER, id); //delete the reference from course_student table

        final String DELETE_COURSE_BY_TEACHER = "DELETE FROM course WHERE teacherId = ?";
        jdbcTemplate.update(DELETE_COURSE_BY_TEACHER, id); // delete reference from course

        final String DELETE_TEACHER = "DELETE FROM teacher WHERE tid = ?";
        jdbcTemplate.update(DELETE_TEACHER, id); // finally, delete the teacher
        //YOUR CODE ENDS HERE
    }
}
